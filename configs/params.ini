; default parameters

; ----- core parameters -----
; see documentation or providing scale-specific sizes
; patch size
patchSize = [5, 5, 5]
; total search region size 
searchSize = [3, 3, 3]
; grid spacing 
gridSpacing = [5, 5, 5]
; number of inner iterations at each scale
nInnerReps = 3
; verbosity (output). 0 for none, 1 for simple, 2 for complex/debug
verbose = 1
; do affine registration before deformable registration
doaffine = false

[hack]
; whether to adapt search grid spacing in inner iterations
adaptSearchGridSpacing = false;

; ----- scaling method options -----
[scale]
; 'load' or 'resize'
method = load
; number of scales
nScales = 4; 
; min volume size along largest dimension, used if 'resize' method used
minVolSize = 16

; ----- warp options -----
[warp]
; registration warp direction: 'backward' or 'forward'
; backward is significantly faster
dir = backward
; warp regularization method. 'none' or 'mrf' or 'quilt'
reg = mrf 
; resolution at which to warp intermediate moving image. 'full' or 'atscale'
res = atscale

; ----- distance method options -----
[dist]
; type of patch search: 'complete' (all states) or # (look for top k states)
nStates = complete
; 'euclidean' or 'seuclidean' or 'sparse'
metric = sparse
; distance location weight 
location = 0.001
; 'full' (memory intense but fast) or 'local' (slower but more memory-manageable)
libraryMethod = local

; ----- markov random field options -----
[mrf]
; see documentation or providing scale-specific sizes
; mrf node weight 
lambda_node = 1
; mrf edge weight
lambda_edge = 0.1
; use local spatial neighbor potential. 'atscale' of 'full' 
spatialPot = full
; mrf function. @patchlib.patchmrf or @patchmrf_PR  
fn = @patchmrf_PR 
; @UGM_Infer_LBP or @UGM_Infer_MF or % @UGM_Infer_LBP_PR
inferMethod = @UGM_Infer_LBP_PR 

[debug]
out = /path/to/out/%d_%d.mat
